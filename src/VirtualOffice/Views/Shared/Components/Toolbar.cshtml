<style>
    .vo-toolbar {
        display: inline-block;
        position: absolute;
        width: 240px;
    }
        .vo-toolbar video {
            width: 100%;
            min-height: 100%;
            background: black;
        }

    .vo-toolbar__actions {
        position: absolute;
        bottom: 10px;
        width: 100%;
        text-align: center;
    }
    .vo-toolvar__settings {
        display: none;
        position: absolute;
        background: white;
    }
        .vo-toolvar__settings.--show {
            display: block;
        }
        .vo-toolvar__settings label {
            display: block;
        }

    .vo-toolbar__message {
        position: absolute;
        background: white;
    }
</style>
<template id="toolbar-component">
    <div class="vo-toolbar"
         :style="style"
         v-on:pointerdown="$emit('pointerdown', $event)">
        <video ref="video" playsinline muted></video>
        <div class="vo-toolbar__actions">
            <vo-switch icon="handshake" 
                       :value="screenDrawer" 
                       v-on:click="handleScreenDrawer" 
                       title="Connect screen drawer"></vo-switch>
            <vo-switch icon="desktop" 
                       :value="desktop" 
                       v-on:click="handleDesktop" 
                       title="Share desktop screen"></vo-switch>
            <vo-switch icon="camera" 
                       :value="camera" 
                       v-on:click="toggleCamera" 
                       title="Toggle camera"></vo-switch>
            <vo-switch icon="microphone" 
                       :value="microphone" 
                       v-on:click="toggleMicrophone" 
                       title="Toggle microphone"></vo-switch>
            <vo-switch icon="cog" 
                       :value="settings" 
                       v-on:click="toggleSettings" 
                       title="Setting devices"></vo-switch>
        </div>
        <div class="vo-toolbar__message">
            <input v-model="message" />
            <button v-on:click="$emit('tweet', message);message=null">TWEET</button>
            <button v-on:click="$emit('tweet', '👍')">👍</button>
            <button v-on:click="$emit('tweet', '👎')">👎</button>
            <button v-on:click="$emit('tweet', '😆')">😆</button>
            <button v-on:click="$emit('tweet', '🪑')">🪑</button>
            <button v-on:click="$emit('tweet', '🍙')">🍙</button>
            <button v-on:click="$emit('tweet', '🍺')">🍺</button>
        </div>
        <div :class="['vo-toolvar__settings', {'--show': settings}]">
            <div>
                <p>Camera</p>
                <label>
                    <input type="radio" name="camera" :value="null" v-model="cameraDevice" /> Not use camera
                </label>
                <label v-for="device in cameras" :key="device.deviceId">
                    <input type="radio" name="camera" :value="device.deviceId" v-model="cameraDevice" /> {{device.label}}
                </label>
            </div>
            <div>
                <p>Microphone</p>
                <label v-for="device in microphones" :key="device.deviceId">
                    <input type="radio" name="microphone" :value="device.deviceId" v-model="microphoneDevice"/> {{device.label}}
                </label>
            </div>
            <button v-on:click="handleSetting">OK</button>
        </div>
    </div>
</template>
<script type="module">
    import { addShortcut } from '/js/helpers.js'
    import { getDevices, setMediaDevice, setDesktopMedia, toggleVideo, toggleAudio } from '/js/media.js'
    import { connectScreenDrawer, onScreenDrawerOpen, onScreenDrawerClose } from '/js/screendrawer.js'

    Vue.component('vo-toolbar', {
        template: '#toolbar-component',
        props: {
            x: { type: Number },
            y: { type: Number },
            faceStream: { type: MediaStream }
        },
        data() {
            return {
                screenDrawer: false,
                desktop: false,
                camera: false,
                microphone: true,
                settings: false,
                cameras: [],
                microphones: [],
                cameraDevice: null,
                microphoneDevice: null,
                message: null,
            }
        },
        computed: {
            style() {
                return {
                    left: this.x + 'px',
                    top: this.y + 'px',
                }
            }
        },
        methods: {
            async toggleSettings() {
                this.settings = !this.settings;
                if (this.settings) {
                    const { cameras, microphones } = await getDevices();
                    this.cameras.splice(0, this.cameras.length, ...cameras);
                    this.microphones.splice(0, this.microphones.length, ...microphones);
                }
            },
            toggleCamera() {
                this.camera = !this.camera;
                toggleVideo(this.camera);
            },
            toggleMicrophone() {
                this.microphone = !this.microphone;
                toggleAudio(this.microphone);
            },
            handleSetting() {
                this.settings = false;
                setMediaDevice(this.cameraDevice, this.microphoneDevice);
            },
            handleScreenDrawer() {
                connectScreenDrawer();
            },
            handleDesktop() {
                setDesktopMedia();
            }
        },
        watch: {
            faceStream(stream) {
                this.$refs.video.srcObject = stream;
                this.$refs.video.play().catch(err => {
                    console.error(err);
                    alert(err);
                });
            }
        },
        mounted() {
            addShortcut('c', () => this.toggleCamera());
            addShortcut('m', () => this.toggleMicrophone());

            onScreenDrawerOpen(() => this.screenDrawer = true);
            onScreenDrawerClose(() => this.screenDrawer = false);
            connectScreenDrawer();
        }
    })
</script>