<style>
    .vo-desktop {
        position: relative;
        width: max-content;
        margin: 0 auto;
    }

    .vo-desktop canvas {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
    }

    .vo-desktop__color {
        position: absolute;
        bottom: 0;
        right: 30px;
    }

    .vo-desktop__expand {
        position: absolute;
        bottom: 0;
        right: 0;
        height: 27px;
    }
    
</style>
<template id="desktop-component">
    <div :class="['vo-desktop', {'--expanded': expanded}]" :style="rootStyle(expanded)">
        <video ref="video" playsinline :style="videoStyle(expanded)"></video>
        <canvas ref="canvas" 
                v-on:pointerdown="handlePointerStart"
                v-on:pointermove="handlePointerDuring"
                v-on:pointerup="handlePointerEnd"
                v-on:pointerleave="handlePointerEnd">
        </canvas>
        <input class="vo-desktop__color" type="color" v-model="color"/>
        <button class="vo-desktop__expand" v-on:click="expanded=!expanded;$refs.video.play()"><i :class="['fa', expanded?'fa-compress':'fa-expand']"></i></button>
    </div>
</template>
<script>
    Vue.component('vo-desktop', {
        template: '#desktop-component',
        props: {
            stream: { type: MediaStream }
        },
        data() {
            return {
                strokes: [],
                color: '#e66465',
                expanded: false
            }
        },
        methods: {
            rootStyle(expanded) {
                if (!this.$refs.video || !expanded)
                    return {}
                const widthFit = this.$refs.video.videoWidth / window.innerWidth > this.$refs.video.videoHeight / window.innerHeight
                return widthFit
                    ? { 'width': '100vw' }
                    : { 'height': '100vh' }
            },
            videoStyle(expanded) {
                if (!this.$refs.video || !expanded)
                    return {}
                const widthFit = this.$refs.video.videoWidth / window.innerWidth > this.$refs.video.videoHeight / window.innerHeight
                return widthFit
                    ? { 'width': '100%' }
                    : { 'height': '100%' }
            },
            closeVideo() {
                if (this.$refs.video.srcObject != null) {
                    this.$refs.video.pause();
                    this.$refs.video.srcObject.getTracks().forEach(track => track.stop());
                    this.$refs.video.srcObject = null;
                }
            },
            update() {
                const w = this.$refs.canvas.width;
                const h = this.$refs.canvas.height;
                this._ctx.clearRect(0, 0, w, h);
                this._ctx.lineWidth = 3;
                this._ctx.lineCap = 'round';
                this._ctx.lineJoin = 'round';
                
                for (let stroke of this.strokes) {
                    this._ctx.beginPath();
                    const len = stroke.points.length;
                    if (len > 1) {
                        const p0 = stroke.points[0];
                        this._ctx.moveTo(p0.x * w, p0.y * h);
                        for (let i = 1; i < len; i++) {
                            const p = stroke.points[i];
                            this._ctx.lineTo(p.x * w, p.y * h);
                        }
                    }
                    else if (len == 1) {
                        const p0 = stroke.points[0];
                        this._ctx.moveTo(p0.x * w, p0.y * h);
                        this._ctx.lineTo(p0.x * w, p0.y * h);
                    }
                    this._ctx.strokeStyle = `rgba(${stroke.r}, ${stroke.g}, ${stroke.b}, 0.5)`;
                    this._ctx.stroke();
                }
            },
            append({ id, r, g, b, x, y }) {
                const index = this.strokes.findIndex(s => s.id == id && s.r == r && s.g == g && s.b == b);
                if (index != -1) {
                    this.strokes[index].points.push({ x, y })
                    this.debounceRemoveStroke(this.strokes[index])
                }
                else {
                    const stroke = { id, r, g, b, points: [{ x, y }] };
                    this.strokes.push(stroke)
                    this.debounceRemoveStroke(stroke)
                }
                this.update();
            },
            debounceRemoveStroke(stroke) {
                if (stroke.timeout)
                    clearTimeout(stroke.timeout)

                stroke.timeout = setTimeout(() => {
                    const index = this.strokes.findIndex(s => s.id == stroke.id && s.r == stroke.r && s.g == stroke.g && s.b == stroke.b);
                    if (index != -1) {
                        this.strokes.splice(index, 1);
                        this.update();
                    }
                }, 10000)
            },
            handlePointerStart(e) {
                const hex = this.color;
                this._id = new Date().getTime();
                this._r = parseInt(hex.substring(1, 3), 16);
                this._g = parseInt(hex.substring(3, 5), 16);
                this._b = parseInt(hex.substring(5), 16);
                const data = {
                    id: this._id,
                    r: this._r,
                    g: this._g,
                    b: this._b,
                    x: e.offsetX / this.$el.offsetWidth,
                    y: e.offsetY / this.$el.offsetHeight
                }
                this.append(data)
                this.$emit('draw', data)
            },
            handlePointerDuring(e) {
                if (this._id) {
                    const data = {
                        id: this._id,
                        r: this._r,
                        g: this._g,
                        b: this._b,
                        x: e.offsetX / this.$el.offsetWidth,
                        y: e.offsetY / this.$el.offsetHeight
                    }
                    this.append(data)
                    this.$emit('draw', data)
                }
            },
            handlePointerEnd(e) {
                this._id = null;
            }
        },
        watch: {
            stream(value) {
                this.closeVideo();
                if (this.$refs.video) {
                    this.$refs.video.srcObject = value;
                    if (value) {
                        this.$refs.video.play().catch(err => alert(err));
                    }
                }
            }
        },
        mounted() {
            if (this.$refs.video) {
                this.$refs.video.srcObject = this.stream;
                if (this.stream) {
                    this.$refs.video.play().catch(err => alert(err));
                }
            }
            this._ctx = this.$refs.canvas.getContext('2d');
        },
        beforeDestroy() {
            this.closeVideo();
        }
    })
</script>